---
description: 
globs: 
alwaysApply: false
---
# Development Workflow and Project Planning

## Project Planning Workflow
When asked to plan a project, follow these steps:

1. **Read Design Documents**: First, read [docs/pre-prd.md](mdc:docs/pre-prd.md) and [docs/prd.md](mdc:docs/prd.md) to understand requirements
2. **Create Implementation Plan**: Write implementation plan with 10-20 tasks in `plan.md` file, including task dependencies
3. **Create Task Files**: Create individual task files in `docs/tasks/` directory for each task

## Task Management Process
Use the `docs/tasks/` directory to manage tasks with individual markdown files:

### Task File Structure
Create task files with the naming convention: `docs/tasks/TASK-{number}-{slug}.md`

```markdown
# TASK-{number}: {Title}

**Status**: `pending` | `in-progress` | `completed` | `blocked`
**Priority**: `high` | `medium` | `low`
**Estimated Time**: {time estimate}
**Sprint**: Sprint 1, Sprint 2, etc.

## Description
Brief description of the task

## Background
Context and background information needed

## Acceptance Criteria
- [ ] Specific criteria 1
- [ ] Specific criteria 2
- [ ] Specific criteria 3

## Technical Details
### Code Examples
```{language}
// Example code here
```

## Dependencies
- TASK-{number}: {dependency description}
- TASK-{number}: {dependency description}

## Notes
- Implementation notes
- Progress updates
- Decisions made

## Definition of Done
- [ ] Feature implemented
- [ ] Tests written and passing
- [ ] Documentation updated
- [ ] Code reviewed
```

## Task Directory Structure
```
docs/tasks/
├── index.md                    # Task overview and status board
├── TASK-001-user-auth.md      # Individual task files
├── TASK-002-article-crud.md
└── sprints/
    ├── sprint-1.md           # Sprint planning documents
    └── sprint-2.md
```

## Task Status Management
- **pending**: Task not yet started
- **in-progress**: Currently being worked on
- **completed**: Task finished and verified
- **blocked**: Task cannot proceed due to dependencies

## Guidelines for Task Creation
- Use descriptive titles with task numbering: `TASK-{number}: {Title}`
- Include comprehensive background and context
- Use markdown code blocks with language specification
- Common languages: go, javascript, typescript, bash, sql, yaml
- Link related tasks using task numbers
- Include acceptance criteria as checkboxes for progress tracking
- Update status and notes as work progresses

## Development Commands
Use development commands defined in [CLAUDE.md](mdc:CLAUDE.md):

```bash
make setup          # Initial development environment setup
make dev            # Run both frontend and backend servers
make dev-front      # Run frontend dev server only
make dev-back       # Run backend dev server only
make test           # Run all tests
make lint           # Run linting
make build          # Build
```
