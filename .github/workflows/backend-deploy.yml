name: Deploy Backend to AWS

on:
  push:
    branches: [ main ]
    paths: 
      - 'backend/**'
      - '.github/workflows/backend-deploy.yml'
      - 'infrastructure/**'
  pull_request:
    branches: [ main ]
    paths: 
      - 'backend/**'
      - '.github/workflows/backend-deploy.yml'
      - 'infrastructure/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - prod

# Set permissions for OIDC token
permissions:
  id-token: write
  contents: read

# Allow only one concurrent deployment per environment
concurrency:
  group: backend-deploy-${{ github.event.inputs.environment || 'dev' }}
  cancel-in-progress: false

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: realworld-backend
  ENVIRONMENT: ${{ github.event.inputs.environment || 'dev' }}

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache-dependency-path: './backend/go.sum'

      - name: Install dependencies
        run: go mod download

      - name: Run tests
        run: go test -v ./...

      - name: Run go vet
        run: go vet ./...

      - name: Check go formatting
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Go code is not formatted. Please run 'go fmt ./...'"
            gofmt -s -l .
            exit 1
          fi

  build-and-deploy:
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-BackendDeploy

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build Docker image
          docker buildx build \
            --platform linux/amd64 \
            --push \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            --file backend/Dockerfile \
            backend/
          
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "registry=$ECR_REGISTRY" >> $GITHUB_OUTPUT

      - name: Download current task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition realworld-${{ env.ENVIRONMENT }}-task \
            --query taskDefinition > task-definition.json

      - name: Update task definition with new image
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: realworld-backend
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: realworld-${{ env.ENVIRONMENT }}-service
          cluster: realworld-${{ env.ENVIRONMENT }}-cluster
          wait-for-service-stability: true

      - name: Verify deployment
        run: |
          echo "🚀 Deployment completed successfully!"
          echo "Environment: ${{ env.ENVIRONMENT }}"
          echo "Image: ${{ steps.build-image.outputs.image }}"
          
          # Get the load balancer URL
          ALB_URL=$(aws elbv2 describe-load-balancers \
            --names realworld-${{ env.ENVIRONMENT }}-alb \
            --query 'LoadBalancers[0].DNSName' \
            --output text)
          
          echo "🌐 Backend URL: http://$ALB_URL"
          echo "🔍 Health check: http://$ALB_URL/health"
          
          # Wait a bit for the service to start up
          echo "⏳ Waiting for service to be ready..."
          sleep 30
          
          # Test health endpoint
          if curl -f "http://$ALB_URL/health" --max-time 30; then
            echo "✅ Health check passed!"
          else
            echo "❌ Health check failed!"
            exit 1
          fi

  cleanup:
    needs: build-and-deploy
    if: always() && needs.build-and-deploy.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-Cleanup

      - name: Clean up old ECR images
        run: |
          # Keep only the latest 5 images to save storage costs
          aws ecr list-images \
            --repository-name $ECR_REPOSITORY \
            --filter tagStatus=TAGGED \
            --query 'imageIds[?imageTag!=`latest`]' \
            --output json | \
          jq '.[] | select(.imageTag != "latest")' | \
          jq -s 'sort_by(.imageTag) | reverse | .[5:]' | \
          jq '.[] | {imageDigest}' > images-to-delete.json
          
          if [ -s images-to-delete.json ]; then
            echo "🗑️ Cleaning up old ECR images..."
            aws ecr batch-delete-image \
              --repository-name $ECR_REPOSITORY \
              --image-ids file://images-to-delete.json
          else
            echo "✨ No old images to clean up"
          fi