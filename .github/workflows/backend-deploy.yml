name: Deploy Backend to AWS

on:
  push:
    branches: [ main ]
    paths: 
      - 'backend/**'
      - '.github/workflows/backend-deploy.yml'
      - 'infrastructure/**'
  pull_request:
    branches: [ main ]
    paths: 
      - 'backend/**'
      - '.github/workflows/backend-deploy.yml'
      - 'infrastructure/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - prod

# Set permissions for OIDC token
permissions:
  id-token: write
  contents: read

# Allow only one concurrent deployment per environment
concurrency:
  group: backend-deploy-${{ github.event.inputs.environment || 'dev' }}
  cancel-in-progress: false

env:
  AWS_REGION: ap-northeast-2
  ENVIRONMENT: ${{ github.event.inputs.environment || 'dev' }}

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache-dependency-path: './backend/go.sum'

      - name: Install dependencies
        run: go mod download

      - name: Run tests
        run: go test -v ./...

      - name: Run go vet
        run: go vet ./...

      - name: Check go formatting
        run: |
          # Run go fmt and check if any files were modified
          go fmt ./...
          if ! git diff --exit-code; then
            echo "Go code was not formatted. Files have been auto-formatted:"
            git diff --name-only
            echo "Please commit the formatting changes."
            exit 1
          fi

  build-and-deploy:
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-BackendDeploy

      - name: Get AWS Account ID
        id: aws-account
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "AWS_ACCOUNT_ID=$ACCOUNT_ID" >> $GITHUB_ENV
          echo "account-id=$ACCOUNT_ID" >> $GITHUB_OUTPUT

      - name: Set up Node.js for CDK
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: infrastructure/package-lock.json

      - name: Install CDK dependencies
        working-directory: ./infrastructure
        run: |
          npm ci
          npm install -g aws-cdk

      - name: Bootstrap CDK
        working-directory: ./infrastructure
        env:
          CDK_DEFAULT_ACCOUNT: ${{ env.AWS_ACCOUNT_ID }}
          CDK_DEFAULT_REGION: ${{ env.AWS_REGION }}
        run: |
          echo "🔧 Bootstrapping CDK..."
          npx cdk bootstrap --context environment=${{ env.ENVIRONMENT }}

      - name: Deploy infrastructure with CDK
        working-directory: ./infrastructure
        env:
          CDK_DEFAULT_ACCOUNT: ${{ env.AWS_ACCOUNT_ID }}
          CDK_DEFAULT_REGION: ${{ env.AWS_REGION }}
        run: |
          echo "📦 Deploying Network stack..."
          npx cdk deploy RealWorld-${{ env.ENVIRONMENT }}-Network --require-approval never --context environment=${{ env.ENVIRONMENT }}
          
          echo "🗄️ Deploying Database stack..."
          npx cdk deploy RealWorld-${{ env.ENVIRONMENT }}-Database --require-approval never --context environment=${{ env.ENVIRONMENT }}
          
          echo "🐳 Deploying ECS stack..."
          npx cdk deploy RealWorld-${{ env.ENVIRONMENT }}-ECS --require-approval never --context environment=${{ env.ENVIRONMENT }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: realworld-backend-${{ env.ENVIRONMENT }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build Docker image
          docker buildx build \
            --platform linux/amd64 \
            --push \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            --file backend/Dockerfile \
            backend/
          
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "registry=$ECR_REGISTRY" >> $GITHUB_OUTPUT

      - name: Update ECS service
        run: |
          echo "🔄 Updating ECS service with new image..."
          aws ecs update-service \
            --cluster realworld-${{ env.ENVIRONMENT }} \
            --service realworld-backend-${{ env.ENVIRONMENT }} \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}

      - name: Wait for ECS service deployment
        run: |
          echo "⏳ Waiting for service deployment to complete..."
          aws ecs wait services-stable \
            --cluster realworld-${{ env.ENVIRONMENT }} \
            --services realworld-backend-${{ env.ENVIRONMENT }} \
            --region ${{ env.AWS_REGION }}

      - name: Get Load Balancer DNS and set as GitHub variable
        id: get-alb-dns
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get ALB DNS from CloudFormation stack output
          ALB_DNS=$(aws cloudformation describe-stacks \
            --stack-name RealWorld-${{ env.ENVIRONMENT }}-ECS \
            --query 'Stacks[0].Outputs[?OutputKey==`LoadBalancerDNS`].OutputValue' \
            --output text)
          
          API_ENDPOINT="http://$ALB_DNS"
          
          echo "alb-dns=$ALB_DNS" >> $GITHUB_OUTPUT
          echo "api-endpoint=$API_ENDPOINT" >> $GITHUB_OUTPUT
          
          # Set repository variable for frontend to use
          gh variable set VITE_API_BASE_URL --body "$API_ENDPOINT"
          
          echo "🌐 Backend URL: $API_ENDPOINT"
          echo "🔗 Frontend will use this endpoint automatically"

      - name: Verify deployment
        run: |
          API_ENDPOINT="${{ steps.get-alb-dns.outputs.api-endpoint }}"
          
          echo "🚀 Deployment completed successfully!"
          echo "Environment: ${{ env.ENVIRONMENT }}"
          echo "Image: ${{ steps.build-image.outputs.image }}"
          echo "🌐 Backend URL: $API_ENDPOINT"
          echo "🔍 Health check: $API_ENDPOINT/health"
          
          # Wait a bit for the service to start up
          echo "⏳ Waiting for service to be ready..."
          sleep 30
          
          # Test health endpoint
          if curl -f "$API_ENDPOINT/health" --max-time 30; then
            echo "✅ Health check passed!"
            echo "✅ GitHub variable VITE_API_BASE_URL set to: $API_ENDPOINT"
          else
            echo "❌ Health check failed!"
            exit 1
          fi

  cleanup:
    needs: build-and-deploy
    if: always() && needs.build-and-deploy.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-Cleanup

      - name: Clean up old ECR images
        run: |
          ECR_REPOSITORY=realworld-backend-${{ env.ENVIRONMENT }}
          
          # Keep only the latest 5 images to save storage costs
          aws ecr list-images \
            --repository-name $ECR_REPOSITORY \
            --filter tagStatus=TAGGED \
            --query 'imageIds[?imageTag!=`latest`]' \
            --output json | \
          jq '.[] | select(.imageTag != "latest")' | \
          jq -s 'sort_by(.imageTag) | reverse | .[5:]' | \
          jq '.[] | {imageDigest}' > images-to-delete.json
          
          if [ -s images-to-delete.json ]; then
            echo "🗑️ Cleaning up old ECR images..."
            aws ecr batch-delete-image \
              --repository-name $ECR_REPOSITORY \
              --image-ids file://images-to-delete.json
          else
            echo "✨ No old images to clean up"
          fi