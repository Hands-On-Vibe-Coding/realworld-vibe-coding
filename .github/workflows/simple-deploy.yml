name: Deploy Educational RealWorld Application

on:
  push:
    branches: [ main ]
    paths: 
      - 'backend/**'
      - 'infrastructure/**'
      - '.github/workflows/simple-deploy.yml'
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ENVIRONMENT: dev

permissions:
  id-token: write
  contents: read
  actions: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: GitHubActions-RealWorld-Educational
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: |
          ./package-lock.json
          ./frontend/package-lock.json

    - name: Install root dependencies
      run: npm ci

    - name: Install frontend dependencies
      run: cd frontend && npm ci

    - name: Build frontend
      run: npm run build:frontend
      env:
        VITE_BASE_URL: /realworld-vibe-coding/
        VITE_API_BASE_URL: ${{ vars.VITE_API_BASE_URL || 'http://localhost:8080' }}

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        cache: true
        cache-dependency-path: './backend/go.sum'

    - name: Build backend
      run: |
        cd backend
        go build -o realworld-backend ./cmd/server/main.go

    - name: Install CDK CLI
      run: npm install -g aws-cdk

    - name: Install infrastructure dependencies
      run: cd infrastructure && npm ci

    - name: CDK Bootstrap (if needed)
      run: |
        cd infrastructure
        cdk bootstrap --app "npx ts-node bin/simple-infrastructure.ts"

    - name: CDK Synth
      run: |
        cd infrastructure
        cdk synth --app "npx ts-node bin/simple-infrastructure.ts"

    - name: CDK Deploy
      run: |
        cd infrastructure
        cdk deploy --all --require-approval never --app "npx ts-node bin/simple-infrastructure.ts"

    - name: Get Load Balancer URL
      id: get-lb-url
      run: |
        LB_DNS=$(aws cloudformation describe-stacks \
          --stack-name RealWorld-dev-ECS \
          --query 'Stacks[0].Outputs[?OutputKey==`LoadBalancerDNS`].OutputValue' \
          --output text 2>/dev/null || echo "")
        
        if [ -n "$LB_DNS" ]; then
          echo "lb_dns=$LB_DNS" >> $GITHUB_OUTPUT
          API_URL="http://$LB_DNS"
          echo "api_url=$API_URL" >> $GITHUB_OUTPUT
          
          # Set GitHub variable for frontend builds
          curl -L \
            -X PATCH \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/actions/variables/VITE_API_BASE_URL \
            -d "{\"name\":\"VITE_API_BASE_URL\",\"value\":\"$API_URL\"}" \
            || curl -L \
              -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              https://api.github.com/repos/${{ github.repository }}/actions/variables \
              -d "{\"name\":\"VITE_API_BASE_URL\",\"value\":\"$API_URL\"}"
        fi

    - name: Build and Push Docker Image
      run: |
        # Get ECR repository URI
        ECR_URI=$(aws cloudformation describe-stacks \
          --stack-name RealWorld-dev-ECS \
          --query 'Stacks[0].Outputs[?OutputKey==`BackendRepositoryURI`].OutputValue' \
          --output text)
        
        if [ -n "$ECR_URI" ]; then
          echo "Building and pushing to $ECR_URI"
          
          # Login to ECR
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
            docker login --username AWS --password-stdin $ECR_URI
          
          # Build and push image
          cd backend
          docker build -t $ECR_URI:latest .
          docker push $ECR_URI:latest
          
          # Update ECS service to use new image
          CLUSTER_NAME=$(aws cloudformation describe-stacks \
            --stack-name RealWorld-dev-ECS \
            --query 'Stacks[0].Outputs[?OutputKey==`ClusterName`].OutputValue' \
            --output text)
          
          SERVICE_NAME=$(aws cloudformation describe-stacks \
            --stack-name RealWorld-dev-ECS \
            --query 'Stacks[0].Outputs[?OutputKey==`ServiceName`].OutputValue' \
            --output text)
          
          # Set desired count to 1 to start the service
          aws ecs update-service \
            --cluster $CLUSTER_NAME \
            --service $SERVICE_NAME \
            --desired-count 1 \
            --force-new-deployment
          
          echo "‚úÖ Deployment completed successfully!"
          echo "üåê Application URL: ${{ steps.get-lb-url.outputs.api_url }}"
        else
          echo "‚ùå Failed to get ECR repository URI"
          exit 1
        fi