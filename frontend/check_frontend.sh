#!/bin/bash

echo "üîç Frontend Health Check Report"
echo "=" | tr '=' '=' | head -c 50; echo

BASE_URL="http://localhost:5175"
API_URL="http://localhost:8080"

echo
echo "1. üìÑ Main Page Check:"

# Check main page
MAIN_RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" "$BASE_URL")
HTTP_STATUS=$(echo "$MAIN_RESPONSE" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
MAIN_CONTENT=$(echo "$MAIN_RESPONSE" | sed 's/HTTPSTATUS:[0-9]*$//')

echo "   Status Code: $HTTP_STATUS"
echo "   Content Length: ${#MAIN_CONTENT} characters"

if [ "$HTTP_STATUS" -eq 200 ]; then
    echo "   ‚úÖ Main page loads successfully"
    
    echo
    echo "   HTML Structure Analysis:"
    
    # Check for key elements
    if echo "$MAIN_CONTENT" | grep -qi "<!doctype html>"; then
        echo "     ‚úÖ Has DOCTYPE"
    else
        echo "     ‚ùå Missing DOCTYPE"
    fi
    
    if echo "$MAIN_CONTENT" | grep -q 'id="root"'; then
        echo "     ‚úÖ Has root div"
    else
        echo "     ‚ùå Missing root div"
    fi
    
    if echo "$MAIN_CONTENT" | grep -q 'src="/src/main.tsx"'; then
        echo "     ‚úÖ Has main.tsx script"
    else
        echo "     ‚ùå Missing main.tsx script"
    fi
    
    if echo "$MAIN_CONTENT" | grep -q '/@vite/client'; then
        echo "     ‚úÖ Has Vite client"
    else
        echo "     ‚ùå Missing Vite client"
    fi
    
    if echo "$MAIN_CONTENT" | grep -q 'react-refresh'; then
        echo "     ‚úÖ Has React Refresh"
    else
        echo "     ‚ùå Missing React Refresh"
    fi
    
    # Extract title
    TITLE=$(echo "$MAIN_CONTENT" | sed -n 's/.*<title>\(.*\)<\/title>.*/\1/p')
    echo "   Title: '$TITLE'"
    
else
    echo "   ‚ùå Main page failed to load: $HTTP_STATUS"
    exit 1
fi

echo
echo "2. üé® Asset Check:"

# Check key assets
ASSETS=("/src/main.tsx" "/src/App.tsx" "/src/index.css" "/@vite/client")

for asset in "${ASSETS[@]}"; do
    ASSET_STATUS=$(curl -s -w "%{http_code}" -o /dev/null "$BASE_URL$asset")
    if [ "$ASSET_STATUS" -eq 200 ]; then
        ASSET_SIZE=$(curl -s "$BASE_URL$asset" | wc -c | tr -d ' ')
        echo "   ‚úÖ $asset ($ASSET_STATUS) - $ASSET_SIZE chars"
    else
        echo "   ‚ùå $asset ($ASSET_STATUS)"
    fi
done

echo
echo "3. üîÑ Development Server Info:"

VITE_CLIENT_STATUS=$(curl -s -w "%{http_code}" -o /dev/null "$BASE_URL/@vite/client")
if [ "$VITE_CLIENT_STATUS" -eq 200 ]; then
    echo "   ‚úÖ Vite development server is active"
    echo "   ‚úÖ Hot Module Replacement (HMR) is available"
else
    echo "   ‚ö†Ô∏è  Vite client not accessible ($VITE_CLIENT_STATUS)"
fi

echo
echo "4. üåê API Backend Check:"

API_STATUS=$(curl -s -w "%{http_code}" -o /dev/null "$API_URL/api/tags" 2>/dev/null)
if [ "$API_STATUS" -eq 200 ]; then
    echo "   ‚úÖ Backend API is accessible ($API_STATUS)"
elif [ "$API_STATUS" -eq 000 ] || [ -z "$API_STATUS" ]; then
    echo "   ‚ùå Backend API not accessible (connection refused)"
    echo "   üí° Make sure the backend server is running on port 8080"
else
    echo "   ‚ö†Ô∏è  Backend API returned status: $API_STATUS"
fi

echo
echo "5. üìä Summary:"

if [ "$HTTP_STATUS" -eq 200 ] && [ "$ASSET_STATUS" -eq 200 ]; then
    echo "   ‚úÖ Frontend appears to be working correctly"
    echo "   ‚úÖ Key assets are loading"
    echo "   ‚úÖ Development server is active"
    
    echo
    echo "6. üéØ Next Steps:"
    echo "   ‚Ä¢ Open http://localhost:5175 in your browser"
    echo "   ‚Ä¢ Check browser console for any JavaScript errors"
    echo "   ‚Ä¢ Verify React app is rendering correctly"
    echo "   ‚Ä¢ Test navigation between different routes"
    
    echo
    echo "7. üîß Debugging Info:"
    echo "   ‚Ä¢ Frontend Dev Server: http://localhost:5175"
    echo "   ‚Ä¢ Backend API Server: http://localhost:8080"
    echo "   ‚Ä¢ Vite HMR: Active"
    echo "   ‚Ä¢ Title: $TITLE"
    
    exit 0
else
    echo "   ‚ùå Some issues detected with frontend setup"
    exit 1
fi