# Simple Dockerfile with SQLite support for production deployment
FROM golang:1.21-alpine AS builder

# Install dependencies including build tools for CGO and SQLite
RUN apk add --no-cache git ca-certificates postgresql-dev gcc musl-dev sqlite-dev

WORKDIR /app

# Copy go files
COPY go.mod go.sum ./
RUN go mod download

# Copy source
COPY . .

# Build with CGO enabled for SQLite support, with build tags for compatibility
RUN CGO_ENABLED=1 go build -tags "sqlite_omit_load_extension" -o server ./cmd/server/main.go

# Runtime stage
FROM alpine:latest

# Install runtime dependencies including SQLite
RUN apk --no-cache add ca-certificates curl postgresql-client sqlite

# Create user
RUN addgroup -g 1001 -S appgroup && \
    adduser -u 1001 -S appuser -G appgroup

WORKDIR /app

# Copy binary
COPY --from=builder /app/server .

# Copy migrations
COPY --from=builder /app/migrations ./migrations

# Fix permissions
RUN chown -R appuser:appgroup /app

USER appuser

EXPOSE 8080

ENV PORT=8080
ENV ENVIRONMENT=production

HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

CMD ["./server"]